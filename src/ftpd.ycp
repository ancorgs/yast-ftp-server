/**
 * File:	clients/ftpd.ycp
 * Package:	Configuration of ftpd
 * Summary:	Main file
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: ftpd.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 *
 * Main file for ftpd configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of ftpd</h3>
 */

textdomain "ftpd";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("Ftpd module started");

import "Progress";
import "Report";
import "Summary";
import "String";

include "ftpd/complex.ycp";

if (!ReadFTPService ())
   return nil;

import "CommandLine";
include "ftpd/wizards.ycp";
include "ftpd/wid_functions.ycp";

boolean FTPdCMDStartup (map options) {
  if (options["atboot"]:nil!=nil && options["manual"]:nil!=nil) {
	    // TRANSLATORS: CommandLine error message
	    CommandLine::Error(_("Only one parameter is allowed."));
	} else if (options["atboot"]:nil!= nil) {
	    CommandLine::Print("");
	    // TRANSLATORS: CommandLine header
	    CommandLine::Print(String::UnderlinedHeader(_("Start-Up:"), 0));
	    CommandLine::Print("");
	    // TRANSLATORS: CommandLine progress information
	    CommandLine::Print(_("Enabling FTP daemon in the boot process..."));
	    CommandLine::Print("");
	    SetEnableService(true);
	} else if (options["manual"]:nil!=nil) {
	    CommandLine::Print("");
	    // TRANSLATORS: CommandLine header
	    CommandLine::Print(String::UnderlinedHeader(_("Start-Up:"), 0));
	    CommandLine::Print("");
	    // TRANSLATORS: CommandLine progress information
	    CommandLine::Print(_("Removing FTP daemon from the boot process..."));
	    CommandLine::Print("");
	    SetEnableService(false);
	} else if (options["show"]:nil!=nil) {
	    CommandLine::Print("");
	    // TRANSLATORS: CommandLine header
	    CommandLine::Print(String::UnderlinedHeader(_("Start-Up:"), 0));
	    CommandLine::Print("");
	    if (GetEnableService()) {
		// TRANSLATORS: CommandLine informative text
		CommandLine::Print(_("FTP daemon is enabled in the boot process"));
	    } else {
		// TRANSLATORS: CommandLine informative text
		CommandLine::Print(_("FTP daemon needs manual starting"));
	    }
	    CommandLine::Print("");
	}

	return true;
    }


map cmdline_description = $[
  "id" 	: "ftpd",
    /* Command line help text for the Xftpd module */
  "help"	: _("Configuration of ftpd"),
  "guihandler"	: FtpdSequence,
  "initialize"	: Ftpd::Read,
  "finish"	: Ftpd::Write,
  "actions"	: $[
	"startup" : $[
	"handler" : FTPdCMDStartup,
	// TRANSLATORS: CommandLine help
	"help" 	  : _("Start-up settings"),
	"example" : [
		   "startup show",
		   "startup atboot",
		   "startup manual",
	            ],
        ],
  ],
  "options"	: $[
	"show"    : $[
		// TRANSLATORS: CommandLine help
		"help"    : _("Show current settings"),
	],
	"atboot"  : $[
		// TRANSLATORS: CommandLine help
		"help" : _("Start FTP daemon in the boot process"),
	],
	"manual" : $[
		// TRANSLATORS: CommandLine help
		"help" : _("Start FTP daemon manually"),
	],
    ],
    "mappings"		: $[
	"startup" : [
		"show", "atboot", "manual",
	],
    ]
];

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
}

/* main ui function */
any ret = nil;

if (propose) {
   ret = FtpdAutoSequence();
} else { 
   ret = CommandLine::Run(cmdline_description);
}

y2debug("ret=%1", ret);

/* Finish */
y2milestone("Ftpd module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}

