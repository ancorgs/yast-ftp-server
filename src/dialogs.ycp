/**
 * File:	include/ftpd/dialogs.ycp
 * Package:	Configuration of ftpd
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftp-server";

import "CWM";
import "CWMServiceStart";
import "DialogTree";
import "Label";
import "Wizard";
import "FtpServer";
import "Popup";
import "CWMFirewallInterfaces";

include "ftp-server/helps.ycp";
include "ftp-server/wid_functions.ycp";
//include "ftp-server/uiforms.ycp";



/**
 * Function for disable back button
 * @param string key
 */

void BackButton (string key) {
     Wizard::SetTitleIcon("yast-ftp-server");
     UI::ChangeWidget(`id(`back), `Enabled, false);
}




/**
 * Returns whether user confirmed aborting the configuration.
 *
 * @return boolean result
 */
define boolean AbortDialog () {
  return Popup::YesNoHeadline(
    // TRANSLATORS: popup headline
    _("Aborting FTP Configuration"),
    // TRANSLATORS: popup message
    _("All changes would be lost.Really abort configuration?"));
}

/**
 * Init function where are added UI hadle functions 
 * Start widget (vsftpd)
 *
 * @return map<string,any> map for start-up widget
 */


map<string,any> StartMode () {
  map<string,any> result = $[];
  result["get_service_auto_start"] = GetEnableService;
  result["set_service_auto_start"] = SetEnableService;
  result["get_service_start_via_xinetd"] = GetStartedViaXinetd;
  result["set_service_start_via_xinetd"] = SetStartedViaXinetd;
  //TRANSLATORS: Radio selection
  result["start_auto_button"] = _("&When booting");
  result["start_manual_button"] =  _("&Manually");
  result["start_xinetd_button"] = _("Via &xinetd");
  result["help"] = sformat (CWMServiceStart::AutoStartHelpXinetdTemplate (),
              _("When Booting"), _("Manually"), _("Via xinetd"));
  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Perform Settings widget
 *
 * @return map<string,any> map for Perform Settings widget
 */

map<string,any> PerformSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`VBox();
  result["init"] = InitPerSettings;
  result["store"] = StorePerforSettings;
  result["help"] = DialogHelpText("per_settings");
  
  return result;
   
}

/**
 * Init function where are added UI hadle functions 
 * Start widget
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> StartStop () {
  map<string,any> result = $[];
  result["service_id"] = "vsftpd";
  result["service_running_label"] = _("FTP is running");
  result["service_not_running_label"] = _("FTP is not running");
  result["start_now_button"] = _("&Start FTP Now");
  result["stop_now_button"] = _("S&top FTP Now");
  result["save_now_button"] = _("Sa&ve Settings and Restart FTP Now");
  result["help"] = sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now"));

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Start widget (pure-ftpd)
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> StartStopPure () {
  map<string,any> result = $[];
  result["service_id"] = "pure-ftpd";
  result["service_running_label"] = _("FTP is running");
  result["service_not_running_label"] = _("FTP is not running");
  result["start_now_button"] = _("&Start FTP Now");
  result["stop_now_button"] = _("S&top FTP Now");
  result["save_now_button"] = _("Sa&ve Settings and Restart FTP Now");
  result["help"] = sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now"));

  return result;
}
/**
 * Init function where are added UI hadle functions 
 * special hack widget where is handlig disable back button
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> DisBackButton () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`Empty();
  result["init"] = BackButton;
  result["help"] = " ";

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * General Settings widget
 *
 * @return map<string,any> map for General Settings widget
 */

map<string,any> GenSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitGenSettings;
  result["handle"] = HandleGenSettings;
  result["store"] = StoreGenSettings;
  result["validate_type"] = `function;
  result["validate_function"] = GenValid;
  result["help"] = DialogHelpText("gen_settings");

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Start widget radiobuttons for switching daemons
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> RBVsftpdPureftpd () {
  map<string,any> result = $[];
  result["label"] = _("Selected Service");
  result["widget"] = `radio_buttons;
  result["items"] = [
            [ "vs_item", _("&vsftpd") ],
            [ "pure_item", _("p&ure-ftpd") ]
	    ];
  result["init"] = InitRBVsPure;
  result["handle"] = HandleRBVsPure;
  result["help"] = DialogHelpText("selected_services");

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Anonymous Settings widget
 *
 * @return map<string,any> map for Anonymous Settings widget
 */

map<string,any> AnonSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitAnonSettings;
  result["store"] = StoreAnonSettings;
  result["handle"] = HandleAnonSettings;
  result["help"] = DialogHelpText("anon_settings");

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (vsftpd)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> VSFTPDSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitVSFTPAddSettings;
  result["validate_type"] = `function;
  result["validate_function"] = ValidVSFTPExpSettings;
  result["store"] = StoreVSFTPDSettings;
  result["handle"] = HandleVSFTPExpertSettings;
  result["help"] = DialogHelpText("vsftpd_settings");

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (pure-ftpd)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> PUREFTPDAddSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitPUREFTPTAddSettings;
  result["validate_type"] = `function;
  result["validate_function"] = ValidPUREFTPExpSettings;
  result["store"] = StorePUREFTPDSettings;
  result["help"] = DialogHelpText("pureftpd_settings");

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * Start widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for start_up widget
 */


map<string,any> start_up () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       "StartMode",
	       `VSpacing(1),
	       // disabling start/stop buttons when it doesn't make sense
	       (Mode::normal() ? "StartStop":`Empty()),
	       `VSpacing(1),
	       "RBVsPureFTPd",
	       `VStretch ()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP Start-Up");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Start-Up");
  result["widget_names"] = [ "DisBackButton", "StartMode", "StartStop", "RBVsPureFTPd"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * General Settings widget (vsftpd)
 * define for tabs_vsftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for General Settings widget
 */

map<string,any> gen_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       FTPGenSettingsVsftpd()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP General Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("General");
  result["widget_names"] = [ "DisBackButton", "GenSettings"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * General Settings widget (pure-ftpd)
 * define for tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for General Settings widget
 */

map<string,any> gen_settings_pure () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       FTPGenSettingsPureftpd()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP General Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("General");
  result["widget_names"] = [ "DisBackButton", "GenSettings"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Performance Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Performance Settings widget
 */


map<string,any> perfor_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       FTPPerforSettings()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Performance Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Performance");
  result["widget_names"] = [ "DisBackButton", "PerforSettings"];

  return result;
}


/**
 * Init function where are added firewall
 *
 * @return map<string,any> map for firewall settings
 */


map<string,any> FirewallSettingsPure () {
  map<string,any> result = $[];

  result["services"] = [ "service:pure-ftpd" ];
  result["display_details"] = true;

  return result;
}

/**
 * Init function where are added firewall
 *
 * @return map<string,any> map for firewall settings
 */


map<string,any> FirewallSettingsVs () {
  map<string,any> result = $[];

  result["services"] = [ "service:vsftpd" ];
  result["display_details"] = true;

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * Anonymous Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Anonymous Settings widget
 */

map<string,any> anon_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       FTPAnonSettings()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Anonymous Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Authentication");
  result["widget_names"] = [ "DisBackButton", "AnonSettings"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Anonymous Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Anonymous Settings widget
 */

map<string,any> vsftpd_anon_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       VsftpdAnonSettings()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Anonymous Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Authentication");
  result["widget_names"] = [ "DisBackButton", "AnonSettings"];

  return result;
}
/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (vsftpd)
 * define for tabs_vsftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> addit_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       VSFTPDAddSettings(),
	       `VSpacing(1),
	       `Frame ( _("SUSEfirewall Settings"),
                 `HBox(`HSpacing(1),
	           "Firewall"
               )),
               `VStretch()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Expert Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Expert Settings");
  result["widget_names"] = [ "DisBackButton", "VSFTPDAddSettings", "Firewall"];

  return result;
}
/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (pure-ftpd)
 * define for tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> addit_settings_pure () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
	       PUREFTPDSecSettings(),
	       `VSpacing(1),
	       `Frame ( _("SUSEfirewall Settings"),
                 `HBox(`HSpacing(1),
	           "Firewall"
               )),
               `VStretch()
	      );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Expert Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Expert Settings");
  result["widget_names"] = [ "DisBackButton", "PUREFTPDAddSettings", "Firewall"];

  return result;
}





/**
 * map for description of widget later in CWNTree
 * widget_descr (vsftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string,map<string,any> > wid_handling_vsftpd = $[
    
    "StartMode" : CWMServiceStart::CreateAutoStartWidget ( StartMode ()),

    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStop ()),

    "DisBackButton" : DisBackButton (),

    "GenSettings" : GenSettings(),

    "PerforSettings" : PerformSettings (), 

    "AnonSettings" : AnonSettings (),

    "VSFTPDAddSettings": VSFTPDSettings(),

    //"PUREFTPDAddSettings": PUREFTPDAddSettings (),

    "RBVsPureFTPd" : RBVsftpdPureftpd (),

    "Firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget (FirewallSettingsVs()),

  ];


/**
 * map for screens of widget later in CWNTree
 * screens (vsftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string, map<string,any> > tabs_vsftpd = $[
  
    "start_up"  : start_up (),

    "gen_settings" : gen_settings (),

    "perfor_settings" :perfor_settings (),

    "anon_settings" : vsftpd_anon_settings (),

    "addit_settings" : addit_settings (),

  ];

/**
 * function for running CWNTree
 * 
 * abort functions for confirm abort
 * 
 */
map<symbol,any> functions = $[
   `abort : AbortDialog,
];


/**
 * function for running CWNTree
 * vsftpd
 *
 * @return symbol return value of DialogTree::ShowAndRun
 */



  symbol RunFTPDialogsVsftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_vsftpd,
	"widget_descr"	: wid_handling_vsftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::AbortButton(),
	"next_button"	: Label::AcceptButton(),
	"functions"	: functions,
    ]);
  }

/**
 * map for description of widget later in CWNTree
 * widget_descr (pure-ftpd)
 *
 * @return map<string,map<string,any> >
 */

map<string,map<string,any> > wid_handling_pureftpd = $[
    
    "StartMode" : CWMServiceStart::CreateAutoStartWidget (StartMode ()),

    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStopPure ()),

    "DisBackButton" : DisBackButton (),

    "GenSettings" : GenSettings(),

    "PerforSettings" : PerformSettings (), 

    "AnonSettings" : AnonSettings (),

    "PUREFTPDAddSettings": PUREFTPDAddSettings (),

    "RBVsPureFTPd" : RBVsftpdPureftpd (),

    "Firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget (FirewallSettingsPure()),
  ];


/**
 * map for screens of widget later in CWNTree
 * screens (pure-ftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string, map<string,any> > tabs_pureftpd = $[
  
    "start_up"  : start_up (),

    "gen_settings" : gen_settings_pure (),

    "perfor_settings" :perfor_settings (),

    "anon_settings" : anon_settings (),

    "addit_settings" : addit_settings_pure (),

  ];

/**
 * function for running CWNTree
 * vsftpd
 *
 * @return symbol return value of DialogTree::ShowAndRun
 */

  symbol RunFTPDialogsPureftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_pureftpd,
	"widget_descr"	: wid_handling_pureftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::AbortButton(),
	"next_button"	: Label::AcceptButton(),
	"functions"	: functions,
    ]);
  }




/* EOF */
}
