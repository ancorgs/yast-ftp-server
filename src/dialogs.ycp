/**
 * File:	include/ftpd/dialogs.ycp
 * Package:	Configuration of ftpd
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftpd";

import "CWM";
import "CWMServiceStart";
import "DialogTree";
import "Label";
import "Wizard";
import "FtpServer";
import "Popup";

include "ftp-server/helps.ycp";
include "ftp-server/wid_functions.ycp";
include "ftp-server/uiforms.ycp";



  void BackButton (string key) {
     UI::ChangeWidget(`id(`back), `Enabled, false);
  }

 
 string HelpVsftp(string key) {
    if (FtpServer::vsftpd_edit)
 	return DialogHelpText("vsftpd_settings");
    else return "";
}

string HelpPureftp(string key) {
    if (!FtpServer::vsftpd_edit)
 	return DialogHelpText("pureftpd_settings");
    else return "";
}


map<string,any> StartMode () {
  map<string,any> result = $[];
  result = add(result, "get_service_auto_start", GetEnableService);
  result = add(result, "set_service_auto_start", SetEnableService);
  result = add(result, "get_service_start_via_xinetd", GetStartedViaXinetd);
  result = add(result, "set_service_start_via_xinetd", SetStartedViaXinetd);
  //TRANSLATORS: Radio selection
  result = add(result, "start_auto_button", _("&When booting"));
  result = add(result, "start_manual_button",  _("&Manually"));
  result = add(result, "start_xinetd_button",  _("Via &xinetd"));
  result = add(result, "help", sformat (CWMServiceStart::AutoStartHelpXinetdTemplate (),
              _("When Booting"), _("Manually"), _("Via xinetd")));
  return result;
}


map<string,any> PerformSettings () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget",`VBox());
  result = add(result, "init", InitPerSettings);
  result = add(result, "store", StorePerforSettings);
  result = add(result, "help", DialogHelpText("per_settings"));
  
  return result;
   
}

map<string,any> StartStop () {
  map<string,any> result = $[];
  result = add(result, "service_id", "vsftpd");
  result = add(result, "service_running_label", _("FTP is running"));
  result = add(result, "service_not_running_label", _("FTP is not running"));
  result = add(result, "start_now_button", _("&Start FTP Now"));
  result = add(result, "stop_now_button", _("S&top FTP Now"));
  result = add(result, "save_now_button", _("Sa&ve Settings and Restart FTP Now"));
  result = add(result, "help", sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now")));

  return result;
}

map<string,any> StartStopPure () {
  map<string,any> result = $[];
  result = add(result, "service_id", "pure-ftpd");
  result = add(result, "service_running_label", _("FTP is running"));
  result = add(result, "service_not_running_label", _("FTP is not running"));
  result = add(result, "start_now_button", _("&Start FTP Now"));
  result = add(result, "stop_now_button", _("S&top FTP Now"));
  result = add(result, "save_now_button", _("Sa&ve Settings and Restart FTP Now"));
  result = add(result, "help", sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now")));

  return result;
}
map<string,any> DisBackButton () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget", `Empty());
  result = add(result, "init", BackButton);
  result = add(result, "help", " ");

  return result;
}

map<string,any> GenSettings () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget", `VBox());
  result = add(result, "init", InitGenSettings);
  result = add(result, "handle", HandleGenSettings);
  result = add(result, "store", StoreGenSettings);
  result = add(result, "validate_type", `function);
  result = add(result, "validate_function", GenValid);
  result = add(result, "help", DialogHelpText("gen_settings"));

  return result;
}

map<string,any> RBVsftpdPureftpd () {
  map<string,any> result = $[];
  result = add(result, "label",   _("Change your daemon"));
  result = add(result, "widget", `radio_buttons);
  result = add(result, "items", [
            [ "vs_item", _("&vsftpd") ],
            [ "pure_item", _("p&ure-ftpd") ]
	    ]
  );
  result = add(result, "init", InitRBVsPure);
  result = add(result, "handle", HandleRBVsPure);
  result = add(result, "help", _("Switch the daemon"));

  return result;
}
map<string,any> AnonSettings () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget", `VBox());
  result = add(result, "init", InitAnonSettings);
  result = add(result, "store", StoreAnonSettings);
  result = add(result, "help", DialogHelpText("anon_settings"));

  return result;
}

map<string,any> VSFTPDSettings () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget", `VBox());
  result = add(result, "init", InitVSFTPAddSettings);
  result = add(result, "store", StoreVSFTPDSettings);
  result = add(result, "help", DialogHelpText("vsftpd_settings"));

  return result;
}

map<string,any> PUREFTPDAddSettings () {
  map<string,any> result = $[];

  result = add(result, "widget", `custom);
  result = add(result, "custom_widget", `VBox());
  result = add(result, "init", InitPUREFTPTAddSettings);
  result = add(result, "store", StorePUREFTPDSettings);
  result = add(result, "help", DialogHelpText("pureftpd_settings"));

  return result;
}





map<string,any> start_up () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       "StartMode",
	       `VSpacing(1),
	       // disabling start/stop buttons when it doesn't make sense
	       "StartStop",	       
	       "RBVsPureFTPd",
	       `VStretch ()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption",  _("FTP Start-Up"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("Start-Up"));
  result = add(result, "widget_names", [ "DisBackButton", "StartMode", "StartStop", "RBVsPureFTPd"]);

  return result;
}

map<string,any> gen_settings () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       FTPGenSettingsVsftpd()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption",  _("FTP General Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("General Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "GenSettings"]);

  return result;
}

map<string,any> gen_settings_pure () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       FTPGenSettingsPureftpd()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption",  _("FTP General Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("General Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "GenSettings"]);

  return result;
}
map<string,any> perfor_settings () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       FTPPerforSettings()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption", _("FTP Performance Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("Performance Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "PerforSettings"]);

  return result;
}

map<string,any> anon_settings () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       FTPAnonSettings()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption", _("FTP Anonymous Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("Anonymous Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "AnonSettings"]);

  return result;
}

map<string,any> addit_settings () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       VSFTPDAddSettings()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption", _("FTP Additional Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("Additional Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "VSFTPDAddSettings"]);

  return result;
}


map<string,any> addit_settings_pure () {
  map<string,any> result = $[];

  result = add(result,"contents", `VBox (		
	       PUREFTPDSecSettings()
	      ));
  // TRANSLATORS: part of dialog caption
  result = add(result,"caption", _("FTP Additional Settings"));
  // TRANSLATORS: tree menu item
  result = add(result, "tree_item_label", _("Additional Settings"));
  result = add(result, "widget_names", [ "DisBackButton", "PUREFTPDAddSettings"]);

  return result;
}

/**
 * Nodes for TreeDialogs
 */

  map<string,map<string,any> > wid_handling_vsftpd = $[
    
    "StartMode" : CWMServiceStart::CreateAutoStartWidget ( StartMode ()),

    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStop ()),

    "DisBackButton" : DisBackButton (),

    "GenSettings" : GenSettings(),

    "PerforSettings" : PerformSettings (), 

    "AnonSettings" : AnonSettings (),

    "VSFTPDAddSettings": VSFTPDSettings(),

    "PUREFTPDAddSettings": PUREFTPDAddSettings (),

    "RBVsPureFTPd" : RBVsftpdPureftpd (),


  ];




  map<string, map<string,any> > tabs_vsftpd = $[
  
    "start_up"  : start_up (),

    "gen_settings" : gen_settings (),

    "perfor_settings" :perfor_settings (),

    "anon_settings" : anon_settings (),

    "addit_settings" : addit_settings (),

  ];

  symbol RunFTPDialogsVsftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_vsftpd,
	"widget_descr"	: wid_handling_vsftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::AbortButton(),
	"next_button"	: Label::AcceptButton(),
	//"functions"	: " ",
    ]);
  }


map<string,map<string,any> > wid_handling_pureftpd = $[
    
    "StartMode" : CWMServiceStart::CreateAutoStartWidget (StartMode ()),

    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStopPure ()),

    "DisBackButton" : DisBackButton (),

    "GenSettings" : GenSettings(),

    "PerforSettings" : PerformSettings (), 

    "AnonSettings" : AnonSettings (),

    "PUREFTPDAddSettings": PUREFTPDAddSettings (),

    "RBVsPureFTPd" : RBVsftpdPureftpd (),
  ];




  map<string, map<string,any> > tabs_pureftpd = $[
  
    "start_up"  : start_up (),

    "gen_settings" : gen_settings_pure (),

    "perfor_settings" :perfor_settings (),

    "anon_settings" : anon_settings (),

    "addit_settings" : addit_settings_pure (),

  ];

  symbol RunFTPDialogsPureftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_pureftpd,
	"widget_descr"	: wid_handling_pureftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::AbortButton(),
	"next_button"	: Label::AcceptButton(),
	//"functions"	: " ",
    ]);
  }




/* EOF */
}
