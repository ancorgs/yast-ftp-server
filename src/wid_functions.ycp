/**
 * File:	include/ftpd/wid_functions.ycp
 * Package:	Configuration of ftpd
 * Summary:	Wizards definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: wid_functions.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

import "Popup";
import "Wizard";
import "Report";
import "Label";
import "Inetd";
import "Service";
import "Mode";

include "ftpd/uiforms.ycp";

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
global boolean GetEnableService () {
  boolean result = false;
  if (Ftpd::EDIT_SETTINGS["StartDaemon"]:nil == "1")
     result = true;
  else
     result = false;   
  return result;
}


/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
global void SetEnableService (boolean enable_service) {  
  if (enable_service)
     Ftpd::EDIT_SETTINGS["StartDaemon"] = "1";
}

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
global boolean GetStartedViaXinetd () {
  boolean result = false;
  if (Ftpd::EDIT_SETTINGS["StartDaemon"]:nil == "2")
     result = true;
  else
     result = false;     
  return result;
}


/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
global void SetStartedViaXinetd (boolean enable_service) {
  boolean result = true;
  if ((Service::Status("xinetd") != 0) && (Ftpd::EDIT_SETTINGS["StartXinetd"]:nil == "NO") 
     && (enable_service)) {
     //Popup::Message("xinetd is not started");
     if (Mode::normal()) {
        UI::OpenDialog(       
          `VBox(
	    `Label("Xinetd is not started!"),
	    `Label("Do you want to start it?"),
	    `HBox(
	      `PushButton(`id(`accept), "&Start"),
	      `PushButton(`id(`cancel), "Canc&el")
            )
          ) // end of `VBox(
        ); // end of UI::OpenDialog(
        while (true) {
          any ret = UI::UserInput();
          if ( ret == `accept ) {
             //Ftpd::EDIT_SETTINGS["StartXinetd"] = "YES";
             result = true;
	     break;
          } else if (ret == `cancel) {
             //Ftpd::EDIT_SETTINGS["StartXinetd"] = "NO";
             result = false;
	     break;
          }
        };
        UI::CloseDialog();
     } 
  } //end of if (Service::Status("xinetd") != 0)
  if (enable_service) {
     Ftpd::EDIT_SETTINGS["StartDaemon"] = "2";
     if (result)
        Ftpd::EDIT_SETTINGS["StartXinetd"] = "YES";
     else
        Ftpd::EDIT_SETTINGS["StartXinetd"] = "NO";
  } else { 
     Ftpd::EDIT_SETTINGS["StartDaemon"] = "0";
     Ftpd::EDIT_SETTINGS["StartXinetd"] = "NO";
  }

}
/**
 * Init function for general settings
 * change ValidChars for textentry
 */
void InitGenSettings(string key) {
  if (!Ftpd::vsftpd_edit)  {
     UI::ChangeWidget(`id( "Umask" ), `ValidChars, "01234567:");   
     UI::ChangeWidget(`id( "Umask" ), `Value,  Ftpd::ValueUIEdit("Umask"));	
  } else {
     UI::ChangeWidget(`id( "UmaskAnon" ), `ValidChars, "01234567");
     UI::ChangeWidget(`id( "UmaskLocal" ),`ValidChars, "01234567");
     UI::ChangeWidget(`id( "UmaskAnon" ), `Value,  Ftpd::ValueUIEdit("UmaskAnon"));
     UI::ChangeWidget(`id( "UmaskLocal" ), `Value,  Ftpd::ValueUIEdit("UmaskLocal"));
     UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, Ftpd::ValueUIEdit("FtpDirLocal"));
     UI::ChangeWidget(`id( "FtpDirAnon" ), `Value, Ftpd::ValueUIEdit("FtpDirAnon"));
  }  
  UI::ChangeWidget(`id( "PasMinPort" ), `Value, tointeger(Ftpd::ValueUIEdit("PasMinPort")));
  UI::ChangeWidget(`id( "PasMaxPort" ), `Value, tointeger(Ftpd::ValueUIEdit("PasMaxPort")));
  UI::ChangeWidget(`id( "ChrootEnable" ), `Value, (Ftpd::ValueUIEdit("ChrootEnable") == "YES"));	
  UI::ChangeWidget(`id( "VerboseLogging" ), `Value, (Ftpd::ValueUIEdit("VerboseLogging") == "YES"));
  
}


/**
 * Handle function for general settings
 * handling started via Xinetd
 */

symbol HandleGenSettings(string key, map event) {
   if (Ftpd::vsftpd_edit)  {
      any button = event["ID"]:nil;
      if (button == "SelectDirLocal") {
          string val = UI::AskForExistingDirectory  ("/","Please select directory...");
          UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, val);
      }
   }
   if (Ftpd::vsftpd_edit)  {
      any button = event["ID"]:nil;
      if (button == "SelectDirAnon") {
          string val = UI::AskForExistingDirectory  ("/","Please select directory...");
          UI::ChangeWidget(`id( "FtpDirAnon" ), `Value, val);
      }
   }  
} //symbol HandleGenSettings(string key, map event) {

/**
 * Validate function for general settings
 * checks values from textentry
 */
boolean GenValid (string key, map event) {

  if (!Ftpd::vsftpd_edit) {
     string new_umask = (string)UI::QueryWidget (`id("Umask"), `Value);
  
     if (size(new_umask) > 0) {
         list <string> l = splitstring (new_umask, ":");
         l = filter (string s, l, ``(s != ""));
         if (size(l) < 2) {
      	     Popup::Message ("It is not valid umask!");
         }
      
     }
  }
  //string smin_port = (string) UI::QueryWidget (`id("PasMinPort"), `Value);
  //string smax_port = (string) UI::QueryWidget (`id("PasMaxPort"), `Value);

  integer min_port = tointeger(UI::QueryWidget (`id("PasMinPort"), `Value));
  integer max_port = tointeger(UI::QueryWidget (`id("PasMaxPort"), `Value));
  
  //if ((size(smin_port) > 0) && (size(smax_port) > 0)) {
  //    min_port = tointeger(smin_port);
  //    max_port = tointeger(smax_port); 
  
      if (min_port > max_port) {
          Popup::Message ("Condition for ports is max port > min port.");
          UI::SetFocus(`id("PasMinPort"));
          return false;
      }
  //}
  return true;
}

/**
 * Store function for general settings
 * save values to temporary structure
 */

void StoreGenSettings (string key, map event) {
  foreach(string key, ["PasMinPort", "PasMaxPort"],{
     Ftpd::WriteToEditMap(key, tostring(UI::QueryWidget(`id(key), `Value)));
  });
  foreach(string key, ["ChrootEnable", "VerboseLogging"],{
     Ftpd::WriteToEditMap(key, (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "YES":"NO"));
  });
  if (!Ftpd::vsftpd_edit) {
     Ftpd::WriteToEditMap("Umask", (string) UI::QueryWidget(`id("Umask"), `Value));
  } else {
     foreach(string key, ["UmaskAnon", "UmaskLocal", "FtpDirLocal", "FtpDirAnon"],{
        Ftpd::WriteToEditMap(key, (string) UI::QueryWidget(`id(key), `Value));
     });

  }

}

/**
 * Init function for general settings
 * save values to temporary structure
 */  
void InitRBVsPure (string key) {
  if ((Ftpd::vsftpd_installed) && (Ftpd::pureftpd_installed)) {
     if (Ftpd::vsftpd_edit)
        UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     else
        UI::ChangeWidget(`id( "pure_item" ), `Value, true);
  } else UI::ChangeWidget(`id("items"), `Visible, false);
}



symbol HandleRBVsPure(string key, map event) {
  if ((Ftpd::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("pure_item"), `Value))) {
     Ftpd::vsftpd_edit = false;
     return `pureftpd;
  }
  if ((!Ftpd::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("vs_item"), `Value))) {
     Ftpd::vsftpd_edit = true;
     return `vsftpd;
  }

}
/**
 * Init function for performance settings
 * change ValidChars from textentry
 */
void InitPerSettings (string key) {

  foreach(string key, ["MaxIdleTime", "MaxClientsPerIP", "MaxClientsNumber", 
		       "LocalMaxRate", "AnonymMaxRate"],{
      //UI::ChangeWidget(`id(key), `ValidChars, "0123456789");
      UI::ChangeWidget(`id(key), `Value, tointeger(Ftpd::ValueUIEdit(key)));
  });
}

/**
 * Store function for performance settings
 * save values to temporary structure
 */
void StorePerforSettings (string key, map event) {
  foreach(string key, ["MaxIdleTime", "MaxClientsPerIP", "MaxClientsNumber", 
		       "LocalMaxRate", "AnonymMaxRate"],{
      Ftpd::WriteToEditMap(key, tostring(UI::QueryWidget(`id(key), `Value)));
  });
}

/**
 * Init function for performance settings
 * change ValidChars from textentry
 */
void InitAnonSettings(string key) {
  integer current = (integer) UI::QueryWidget(`id("AnonAuthen"), `CurrentButton);
  integer val = tointeger(Ftpd::ValueUIEdit("AnonAuthen"));
  UI::ChangeWidget(`id("AnonAuthen"), `CurrentButton, val);
  UI::ChangeWidget(`id( "AnonyReadOnly" ), `Value, 
      (Ftpd::ValueUIEdit("AnonyReadOnly") == "YES"));
  UI::ChangeWidget(`id( "AnonymCreatDirs" ), `Value, 
      (Ftpd::ValueUIEdit("AnonymCreatDirs") == "YES"));


}


/**
 * Store function for performance settings
 * save values to temporary structure
 */
void StoreAnonSettings (string key, map event) {
  Ftpd::WriteToEditMap("AnonAuthen", tostring(UI::QueryWidget(`id("AnonAuthen"), `CurrentButton)));
  foreach(string key, ["AnonyReadOnly", "AnonymCreatDirs"],{
     Ftpd::WriteToEditMap(key, (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "YES":"NO"));
  });
}



/**
 * Init function for pure-ftpd add settings
 * change values a display correct widget
 */
void InitPUREFTPTAddSettings (string key) {
  UI::ChangeWidget(`id( "AntiWarez" ), `Value, 
     (Ftpd::ValueUIEdit("AntiWarez") == "YES"));
  integer current = (integer) UI::QueryWidget(`id("SSL"), `CurrentButton);
  UI::ChangeWidget(`id("SSL"), `CurrentButton, tointeger(Ftpd::ValueUIEdit("SSL")));

}

/**
 * Store function for pure-ftpd add settings
 * save values to temporary structure
 */
void StorePUREFTPDSettings (string key, map event) {
  Ftpd::WriteToEditMap("AntiWarez", (((boolean) UI::QueryWidget(`id("AntiWarez"), `Value) == true) ? "YES":"NO"));
  Ftpd::WriteToEditMap("SSL", tostring(UI::QueryWidget(`id("SSL"), `CurrentButton)));

  //y2milestone("-------------PURE_EDIT_SETTINGS-------------------");  
  //y2milestone("Pure-ftpd configuration has been read: %1", Ftpd::PURE_EDIT_SETTINGS);
  //y2milestone("---------------------------------------------");
}


/**
 * Init function for vsftpd add settings
 * change values a display correct widget
 */
void InitVSFTPAddSettings (string key) {
  UI::ChangeWidget(`id("Banner"), `Value, Ftpd::ValueUIEdit("Banner"));
  UI::ChangeWidget(`id( "SSLEnable" ), `Value, (Ftpd::ValueUIEdit("SSLEnable") == "YES"));
  UI::ChangeWidget(`id("SSLVersion"), `CurrentButton, tointeger(Ftpd::ValueUIEdit("SSLVersion")));
  UI::ChangeWidget(`id( "TLS" ), `Value, (Ftpd::ValueUIEdit("TLS") == "YES"));
}

/**
 * Store function for vsftpd add settings
 * save values to temporary structure
 */

void StoreVSFTPDSettings (string key, map event) {
  integer val = 4;
  string UIval = tostring(UI::QueryWidget(`id("SSLVersion"), `Value));
  if (UIval == "Enabled SSL v2")
     val = 0;
  else if (UIval == "Enabled SSL v3")
     val = 1;
  else if (UIval == "Enabled SSL v2 & v3")
     val = 2;
  else
     val = 4;
  Ftpd::WriteToEditMap("SSLVersion", tostring(val));
  Ftpd::WriteToEditMap("TLS", (((boolean) UI::QueryWidget(`id("TLS"), `Value) == true) ? "YES":"NO"));
  Ftpd::WriteToEditMap("SSLEnable", (((boolean) UI::QueryWidget(`id("SSLEnable"), `Value) == true) ? "YES":"NO"));
  Ftpd::WriteToEditMap("Banner", (string) UI::QueryWidget(`id("Banner"), `Value));

  y2milestone("-------------EDIT_SETTINGS-------------------");  
  y2milestone("vsftpd configuration has been read: %1", Ftpd::EDIT_SETTINGS);
  y2milestone("---------------------------------------------");
  
}


}