/**
 * File:	include/ftp-server/wid_functions.ycp
 * Package:	Configuration of ftp-server
 * Summary:	Wizards definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: wid_functions.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftp-server";

import "Popup";
import "Wizard";
import "Report";
import "Label";
import "Inetd";
import "Service";
import "Mode";
import "Users";
import "Mode";
import "FileUtils";


include "ftp-server/uiforms.ycp";

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
boolean GetEnableService () {
  boolean result = false;
  if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "1")
     result = true;
  else
     result = false;   
  return result;
}


/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
void SetEnableService (boolean enable_service) {  
  if (size(FtpServer::EDIT_SETTINGS) == 0)
     FtpServer::EDIT_SETTINGS = FtpServer::DEFAULT_CONFIG;

  if (enable_service) {
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "1";
     FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  }
  
}

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
boolean GetStartedViaXinetd () {
  boolean result = false;
  if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2")
     result = true;
  else
     result = false;     
  return result;
}


/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
void SetStartedViaXinetd (boolean enable_service) {
  boolean result = true;
  if (enable_service) {
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "2";
     if ((Service::Status("xinetd") != 0) && 
        (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "NO")) {
        if (Mode::normal()) {
           UI::OpenDialog(       
             `VBox(
	       `Label("Xinetd is not started!"),
	       `Label("Do you want to start it?"),
	       `HBox(
	         `PushButton(`id(`accept), "&Start"),
	         `PushButton(`id(`cancel), "Canc&el")
               )
             ) // end of `VBox(
           ); // end of UI::OpenDialog(
           while (true) {
             any ret = UI::UserInput();
             if ( ret == `accept ) {
                //FtpServer::EDIT_SETTINGS["StartXinetd"] = "YES";
                result = true;
	        break;
             } else if (ret == `cancel) {
                //FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
                result = false;
	        break;
             }
           };
           UI::CloseDialog();
        } // end of if (Mode::normal()) {
     } // end of if ((Service::Status("xinetd") != 0)...
     if (result)
        FtpServer::EDIT_SETTINGS["StartXinetd"] = "YES";
     else
        FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  } else { 
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "0";
     FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  }

}
/**
 * Init function for general settings
 * change ValidChars for textentry
 */
void InitGenSettings(string key) {
  if (!FtpServer::vsftpd_edit)  {
     UI::ChangeWidget(`id( "Umask" ), `ValidChars, "01234567:");   
     UI::ChangeWidget(`id( "Umask" ), `Value,  FtpServer::ValueUIEdit("Umask"));
     if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "YES") {
        UI::ChangeWidget(`id( "FtpDirAnon" ), `Enabled, false);
        UI::ChangeWidget(`id ( "SelectDirAnon" ),`Enabled, false);
     }	
  } else {     
     UI::ChangeWidget(`id( "UmaskAnon" ), `ValidChars, "01234567");
     UI::ChangeWidget(`id( "UmaskLocal" ),`ValidChars, "01234567");
     UI::ChangeWidget(`id("Banner"), `Value, FtpServer::ValueUIEdit("Banner"));
     UI::ChangeWidget(`id( "UmaskAnon" ), `Value,  FtpServer::ValueUIEdit("UmaskAnon"));
     UI::ChangeWidget(`id( "UmaskLocal" ), `Value,  FtpServer::ValueUIEdit("UmaskLocal"));
     UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, FtpServer::ValueUIEdit("FtpDirLocal"));
     
  } 
  if  (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "NO")
      UI::ChangeWidget(`id( "FtpDirAnon" ), `Value, FtpServer::ValueUIEdit("FtpDirAnon"));
  UI::ChangeWidget(`id( "ChrootEnable" ), `Value, (FtpServer::ValueUIEdit("ChrootEnable") == "YES"));	
  UI::ChangeWidget(`id( "VerboseLogging" ), `Value, (FtpServer::ValueUIEdit("VerboseLogging") == "YES"));
  
}


/**
 * Handle function for general settings
 * handling started via Xinetd
 */

symbol HandleGenSettings(string key, map event) {
   any button = event["ID"]:nil;
   if (FtpServer::vsftpd_edit)  {      
      if (button == "SelectDirLocal") {
          string val = UI::AskForExistingDirectory  ("/","Please select directory...");
          UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, val);
      }
   } // end of if (FtpServer::vsftpd_edit)
   if (button == "SelectDirAnon") {
      string val = UI::AskForExistingDirectory  ("/","Please select directory...");
      UI::ChangeWidget(`id( "FtpDirAnon" ), `Value, val);
   } 
} // end of symbol HandleGenSettings(string key, map event) {

/**
 * Validate function for general settings
 * checks values from textentry
 */
boolean GenValid (string key, map event) {

  if (!FtpServer::vsftpd_edit) {
     string new_umask = (string)UI::QueryWidget (`id("Umask"), `Value);
  
     if (size(new_umask) > 0) {
         list <string> l = splitstring (new_umask, ":");
         l = filter (string s, l, ``(s != ""));
         if (size(l) < 2) {
      	     Popup::Message ("It is not valid umask!");
	     UI::SetFocus(`id("Umask"));
             return false;
         }
      
     }
     if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "NO") {
        string AnonHomeDir = (string)UI::QueryWidget (`id("FtpDirAnon"), `Value);
        //checking correct homedir for anonymous user 
        if ((AnonHomeDir != "") && (Mode::normal())) {
           if (AnonHomeDir != FtpServer::anon_homedir) {
              string error = Users::EditUser($["homedirectory":AnonHomeDir]);
              if ((error != nil) && (error != "")) {
                 Popup::Error(error);
	         UI::SetFocus(`id("FtpDirAnon"));
	         return false;
	      }
              integer uid = FtpServer::anon_uid;
              boolean failed = false;
	      map<string,integer> ui_map = $[];
              map error_map = $[];
	      do {
	         error_map = Users::CheckHomeUI (uid, AnonHomeDir, ui_map);
	         if (error_map != $[]) {
		    if (!Popup::YesNo (error_map ["question"]:""))
		       failed = true;
		    else
		       ui_map[ error_map["question_id"]:"" ] = 1;
	         }
	      } while (error_map != $[] && !failed);
	   } //end of if (AnonHomeDir != FtpServer::anon_homedir) {
        } //end of if ((AnonHomeDir != "") && (Mode::normal())) {
     } //end of if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil != "NO") {
  } //end of if (!FtpServer::vsftpd_edit) {
  return true;
}

/**
 * Store function for general settings
 * save values to temporary structure
 */

void StoreGenSettings (string key, map event) {  
  foreach(string key, ["ChrootEnable", "VerboseLogging"],{
     FtpServer::WriteToEditMap(key, (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "YES":"NO"));
  });
  if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "NO")
     FtpServer::WriteToEditMap("FtpDirAnon", (string) UI::QueryWidget(`id("FtpDirAnon"), `Value));
  if (!FtpServer::vsftpd_edit) {
     FtpServer::WriteToEditMap("Umask", (string) UI::QueryWidget(`id("Umask"), `Value));
  } else {
     foreach(string key, ["UmaskAnon", "UmaskLocal", "FtpDirLocal", "Banner"],{
        FtpServer::WriteToEditMap(key, (string) UI::QueryWidget(`id(key), `Value));
     });

  }

}

/**
 * Init function for general settings
 * save values to temporary structure
 */  
void InitRBVsPure (string key) {
  if ((FtpServer::vsftpd_installed) && (FtpServer::pureftpd_installed)) {
     if (FtpServer::vsftpd_edit) {
        UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     }else
        UI::ChangeWidget(`id( "pure_item" ), `Value, true);
  } else if (FtpServer::vsftpd_installed && !FtpServer::pureftpd_installed) {
     UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     UI::ChangeWidget(`id( "pure_item" ), `Enabled, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  } else if (!FtpServer::vsftpd_installed && FtpServer::pureftpd_installed) {
     UI::ChangeWidget(`id( "pure_item" ), `Value, true);
     UI::ChangeWidget(`id( "pure_item" ), `Enabled, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  } else {
     UI::ChangeWidget(`id( "pure_item" ), `Enable, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  }

  if (!Mode::normal()) {
     if (FtpServer::vsftpd_edit) {
        UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     } else {
        UI::ChangeWidget(`id( "pure_item" ), `Value, true);
     }
     UI::ChangeWidget(`id( "pure_item" ), `Enable, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  }
}


symbol HandleRBVsPure(string key, map event) {
  if ((FtpServer::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("pure_item"), `Value)) 
     && FtpServer::vsftpd_installed) {
     FtpServer::vsftpd_edit = false;
     return `pureftpd;
  }
  if ((!FtpServer::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("vs_item"), `Value)) 
     && FtpServer::pureftpd_installed) {
     FtpServer::vsftpd_edit = true;
     return `vsftpd;
  }

}
/**
 * Init function for performance settings
 * change ValidChars from textentry
 */
void InitPerSettings (string key) {

  foreach(string key, ["MaxIdleTime", "MaxClientsPerIP", "MaxClientsNumber", 
		       "LocalMaxRate", "AnonMaxRate"],{
      //UI::ChangeWidget(`id(key), `ValidChars, "0123456789");
      UI::ChangeWidget(`id(key), `Value, tointeger(FtpServer::ValueUIEdit(key)));
  });
}

/**
 * Store function for performance settings
 * save values to temporary structure
 */
void StorePerforSettings (string key, map event) {
  foreach(string key, ["MaxIdleTime", "MaxClientsPerIP", "MaxClientsNumber", 
		       "LocalMaxRate", "AnonMaxRate"],{
      FtpServer::WriteToEditMap(key, tostring(UI::QueryWidget(`id(key), `Value)));
  });
}

/**
 * Init function for performance settings
 * change ValidChars from textentry
 */
void InitAnonSettings(string key) {
  integer current = (integer) UI::QueryWidget(`id("AnonAuthen"), `CurrentButton);
  integer val = tointeger(FtpServer::ValueUIEdit("AnonAuthen"));
  UI::ChangeWidget(`id("AnonAuthen"), `CurrentButton, val);
  UI::ChangeWidget(`id( "AnonReadOnly" ), `Value, 
      (FtpServer::ValueUIEdit("AnonReadOnly") == "NO"));
  UI::ChangeWidget(`id( "AnonCreatDirs" ), `Value, 
      (FtpServer::ValueUIEdit("AnonCreatDirs") == "YES"));


}


/**
 * Store function for performance settings
 * save values to temporary structure
 */
void StoreAnonSettings (string key, map event) {
  FtpServer::WriteToEditMap("AnonAuthen", tostring(UI::QueryWidget(`id("AnonAuthen"), `CurrentButton)));
  foreach(string key, ["AnonCreatDirs"],{
     FtpServer::WriteToEditMap(key, (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "YES":"NO"));
  });

  FtpServer::WriteToEditMap("AnonReadOnly", (((boolean) UI::QueryWidget(`id("AnonReadOnly"), `Value) == true) ? "NO":"YES"));
  
}



/**
 * Init function for pure-ftp-server add settings
 * change values a display correct widget
 */
void InitPUREFTPTAddSettings (string key) {
  UI::ChangeWidget(`id( "AntiWarez" ), `Value, 
     (FtpServer::ValueUIEdit("AntiWarez") == "YES"));
  integer current = (integer) UI::QueryWidget(`id("SSL"), `CurrentButton);
  UI::ChangeWidget(`id("SSL"), `CurrentButton, tointeger(FtpServer::ValueUIEdit("SSL")));
  foreach(string key, ["PasMinPort", "PasMaxPort"],{
    UI::ChangeWidget(`id(key), `Value, tointeger(FtpServer::ValueUIEdit(key)));
  });
}

/**
 * Validate function for Expert settings (pure-ftpd)
 * 
 */

 boolean ValidPUREFTPExpSettings(string key, map event) {
  integer min_port = tointeger(UI::QueryWidget (`id("PasMinPort"), `Value));
  integer max_port = tointeger(UI::QueryWidget (`id("PasMaxPort"), `Value));
    
  if (min_port > max_port) {
     Popup::Message ("Condition for ports is max port > min port.");
     UI::SetFocus(`id("PasMinPort"));
     return false;
  }
  
  integer current = (integer) UI::QueryWidget(`id("SSL"), `CurrentButton);

  if ((!FileUtils::Exists("/etc/ssl/private/pure-ftpd.pem")) && (current > 0)) {
     Popup::Error("Certificate /etc/ssl/private/pure-ftpd.pem for SSL connection is missing.");
     return false;
  }

  return true;

}


/**
 * Store function for pure-ftp-server add settings
 * save values to temporary structure
 */
void StorePUREFTPDSettings (string key, map event) {
  FtpServer::WriteToEditMap("AntiWarez", (((boolean) UI::QueryWidget(`id("AntiWarez"), `Value) == true) ? "YES":"NO"));
  FtpServer::WriteToEditMap("SSL", tostring(UI::QueryWidget(`id("SSL"), `CurrentButton)));

  //FtpServer::WriteToEditMap("CertFile", tostring(UI::QueryWidget(`id("CertFile"), `Value)));
  foreach(string key, ["PasMinPort", "PasMaxPort"],{
     FtpServer::WriteToEditMap(key, tostring(UI::QueryWidget(`id(key), `Value)));
  });
  //y2milestone("-------------EDIT_SETTINGS-------------------");  
  //y2milestone("Pure-ftpd configuration has been read: %1", FtpServer::EDIT_SETTINGS);
  //y2milestone("---------------------------------------------");
}


/**
 * Init function for vsftpd add settings
 * change values a display correct widget
 */
void InitVSFTPAddSettings (string key) {

  foreach(string key, ["SSLEnable", "TLS", "SSLv2", "SSLv3", "PassiveMode"],{
    UI::ChangeWidget(`id(key), `Value, (FtpServer::ValueUIEdit(key) == "YES"));
  });
  foreach(string key, ["PasMinPort", "PasMaxPort" ],{
    UI::ChangeWidget(`id(key), `Value, tointeger(FtpServer::ValueUIEdit(key)));
  });
  
  UI::ChangeWidget(`id( "CertFile" ), `Value, FtpServer::ValueUIEdit("CertFile"));
}

/**
 * Validate function for Expert settings (vsftpd)
 * 
 */

 boolean ValidVSFTPExpSettings(string key, map event) {
  integer min_port = tointeger(UI::QueryWidget (`id("PasMinPort"), `Value));
  integer max_port = tointeger(UI::QueryWidget (`id("PasMaxPort"), `Value));
    
  if (min_port > max_port) {
     Popup::Message ("Condition for ports is max port > min port.");
     UI::SetFocus(`id("PasMinPort"));
     return false;
  }

  string rsa_cert = tostring(UI::QueryWidget(`id("CertFile"), `Value));
  boolean ssl_enable = (boolean) UI::QueryWidget(`id("SSLEnable"), `Value);

  if (((rsa_cert == "")||(rsa_cert ==nil)) && (ssl_enable)) {
     Popup::Error("DSA certificate is missing.");
     UI::SetFocus(`id("CertFile"));
     return false;
  }

  return true;

}



/**
 * Handle function for general settings
 * handling started via Xinetd
 */

symbol HandleVSFTPExpertSettings(string key, map event) {
   any button = event["ID"]:nil;
   if (FtpServer::vsftpd_edit)  {      
      if (button == "SelectCertFile") {
          string val = UI::AskForExistingFile  ("/","*.*","Please Select File");
          UI::ChangeWidget(`id( "CertFile" ), `Value, val);
      }
   } // end of if (FtpServer::vsftpd_edit)
} // end of symbol HandleGenSettings(string key, map event) {

/**
 * Store function for vsftpd add settings
 * save values to temporary structure
 */

void StoreVSFTPDSettings (string key, map event) {
  
  foreach(string key, ["SSLEnable", "TLS", "SSLv2", "SSLv3", "PassiveMode"],{
    FtpServer::WriteToEditMap(key, (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "YES":"NO"));
  });
  
  foreach(string key, ["PasMinPort", "PasMaxPort", "CertFile"],{
     FtpServer::WriteToEditMap(key, tostring(UI::QueryWidget(`id(key), `Value)));
  });

  //y2milestone("-------------EDIT_SETTINGS-------------------");  
  //y2milestone("vsftpd configuration has been read: %1", FtpServer::EDIT_SETTINGS);
  //y2milestone("---------------------------------------------");
  
}


}