/**
 * File:	include/ftpd/complex.ycp
 * Package:	Configuration of ftpd
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z juhliarik $
 */

{

textdomain "ftp-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FtpServer";
import "Package";
import "Service";
include "ftp-server/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return FtpServer::Modified();
}

boolean ReallyAbort() {
    return !FtpServer::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}


/**
 * Init settings dialog
 * 
 */

boolean ReadFTPService () {


  //Checking if ftp daemons are installed

  any ret = nil;
  if (Package::Installed("vsftpd")) {
     FtpServer::vsftpd_init_count = FtpServer::vsftpd_init_count + 1;
     FtpServer::vsftpd_installed = true;
  }

  if (Package::Installed("pure-ftpd")) {
     FtpServer::pureftpd_init_count = FtpServer::pureftpd_init_count + 1;
     FtpServer::pureftpd_installed = true;
  }

  if ((FtpServer::vsftpd_init_count == 0) && (FtpServer::pureftpd_init_count == 0)) {
     //Popup::Error("There isn't installed ftp daemon (vsftpd/pure-ftpd)!" );
     UI::OpenDialog(
       `RadioButtonGroup(`id("IntstallFTPd"), 
	 `VBox(
	   `Label("There isn't installed ftp daemon (vsftpd/pure-ftpd)!"),
	   `Label("Choose daemon for installation?"),
	   `Left(`RadioButton(`id(0), `opt(`notify), "&vsftpd", true)),
	   `Left(`RadioButton(`id(1), `opt(`notify), "&pure-ftpd")),
	   `HBox(
	     `PushButton(`id(`accept), "&Accept"),
	     `PushButton(`id(`cancel), "&Cancel")
           )
	 ) // end of `VBox(
       ) //end of `RadioButtonGroup(`id("IntstallFTPd")
     ); // end of UI::OpenDialog(
     integer install = 0;
     while (true) {
       ret = UI::UserInput();
       if ( ret == `accept ) {
          install = (integer) UI::QueryWidget(`id("IntstallFTPd"), `CurrentButton);
	  break;
       } else if (ret == `cancel) {
          UI::CloseDialog();
	  y2milestone("FTP module: Installation was aborted");
          return false;
       }

     };
     UI::CloseDialog();
     any result = nil;
     list <string> daemon_list = [];
     string daemon = "";
     if (install == 0) {
        daemon = "vsftpd";
        daemon_list = add(daemon_list, daemon);
     } else {
        daemon = "pure-ftpd";
        daemon_list = add(daemon_list, daemon);
     }
     result = Package::Available(daemon);
     if (result == true) {
        result = Package::DoInstall(daemon_list);
        if (result == false) {
  	   Popup::Error("Installation failed!");
           y2milestone("FTP module: Installation failed");
	   return false;
	}
	if (daemon == "pure-ftpd")
           FtpServer::pureftpd_installed = true;
        else
	   FtpServer::vsftpd_installed = true; 
     } else if (result == false) {
	Popup::Error("Package for ftp is not available");
	y2milestone("FTP module: Package for ftp is not available");
	return false;
     } else if (result == nil) {
        Popup::Error("Package was not found");
	y2milestone("FTP module: Package was not found");
	return false;
     } 	           
  }; //end of if ((FtpServer::vsftpd_init_count == 0) && (FtpServer::pureftpd_init_count == 0)) {

  //Checking Enabled services for ftp daemons

  if (Service::Enabled("pure-ftpd")) 
     FtpServer::pureftpd_init_count = FtpServer::pureftpd_init_count + 1;

  if (Service::Enabled("vsftpd")) 
     FtpServer::vsftpd_init_count = FtpServer::vsftpd_init_count + 1;

  //Checking status of ftp daemons

  if (Service::Status("vsftpd") == 0) {
     FtpServer::vsftpd_edit = true;
     FtpServer::vsftpd_init_count = FtpServer::vsftpd_init_count + 1;
  } else {
     FtpServer::vsftpd_edit = false;
  }

  if (Service::Status("pure-ftpd") == 0) {
     FtpServer::vsftpd_edit = false;
     FtpServer::pureftpd_init_count = FtpServer::pureftpd_init_count + 1;
  } else {
     FtpServer::vsftpd_edit = true;
  }

  // open dialog for choosing ftp daemon  

  if ((FtpServer::pureftpd_init_count == FtpServer::vsftpd_init_count) && 
     (FtpServer::pureftpd_installed) && (FtpServer::vsftpd_installed)) {
     UI::OpenDialog(
       `RadioButtonGroup(`id(`rb), `VBox(
	 `Label("Choose daemon?"),
	 `Left(`RadioButton(`id(0), `opt(`notify), "&vsftpd", ((FtpServer::vsftpd_edit)? true:false))),
	 `Left(`RadioButton(`id(1), `opt(`notify), "&pure-ftpd", ((FtpServer::vsftpd_edit)? false:true))),
	 `HBox(
	   `PushButton(`id(`close), "&Accept"),
	   `PushButton(`id(`abort),  "&Cancel")
	 )
       )) //end of `RadioButtonGroup(`id(`rb), `VBox(
     ); //end of UI::OpenDialog(
    
     while (true) {
       ret = UI::UserInput();
       if (ret == `close) {
	  FtpServer::rad_but = (integer) UI::QueryWidget(`id(`rb), `CurrentButton);
	  break;
       } else if (ret == `abort) {
         return false;
       }
     } //end of  while (true) {
    
     if (FtpServer::rad_but == 0)
	FtpServer::vsftpd_edit = true;
     else
	FtpServer::vsftpd_edit = false;
    
     y2milestone("Terminating by the radiobutom ID '%1'", FtpServer::rad_but);
    
     UI::CloseDialog();
  } else { //end of if (FtpServer::pureftpd_init_count == FtpServer::vsftpd_init_count) {
    if ((FtpServer::pureftpd_installed) && (!FtpServer::vsftpd_installed))
       FtpServer::vsftpd_edit = false;
    if ((!FtpServer::pureftpd_installed) && (FtpServer::vsftpd_installed))
       FtpServer::vsftpd_edit = true;
  }
  return true;
}



/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // FtpServer::AbortFunction = PollAbort;
    boolean result = ReadFTPService ();
    if (!result) return `abort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FtpServer::Read();
    if (((FtpServer::vsftpd_edit) && (ret)) || ((!FtpServer::vsftpd_edit) && (ret)))
       return `next;
    else
       return `abort;
    
    //return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // FtpServer::AbortFunction = PollAbort;
    boolean ret = FtpServer::Write();
    return ret ? `next : `abort;
}



/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* Ftpd summary dialog caption */
    string caption = _("Ftpd Configuration");

    /* FIXME */
    list summary = FtpServer::Summary();
    list unconfigured = summary[1]:[];
    string configured = summary[0]:"";

    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("Ftpd to Configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* overview dialog */
        else if(ret == `edit_button) {
            ret = `overview;
            break;
        }
        /* configure the selected device */
        else if(ret == `configure_button) {
	    // TODO FIXME: check for change of the configuration
            any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Ftpd overview dialog caption */
    string caption = _("Ftpd Overview");

    list overview = FtpServer::Overview();

    /* FIXME table header */
    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Number"), _("Ftpd")),
	overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add_button) {
	    /* FIXME */
            ret = `add;
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
	    /* FIXME */
            ret = `edit;
            break;
        }
        /* delete */
        else if(ret == `delete_button) {
	    /* FIXME */
            continue;
        }
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
